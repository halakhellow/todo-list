{"version":3,"sources":["TodoItem.js","TodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","state","edit","newTask","task","handleRemove","bind","handleEdit","handleChange","handleCompletion","handleSubmit","this","remove","id","setState","event","target","value","complete","preventDefault","className","onSubmit","onChange","completed","onClick","Component","TodoForm","todo","handelChange","add","uuid","placeholder","TodoList","todos","addTodo","removeTodo","editTask","completedTask","newTodos","filter","editedTodos","map","completedTodos","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.348200a7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./TodoItem.css\";\r\n\r\nclass TodoItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      edit: false,\r\n      newTask: this.props.task,\r\n    };\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.handleEdit = this.handleEdit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleCompletion = this.handleCompletion.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleRemove() {\r\n    this.props.remove(this.props.id);\r\n  }\r\n  handleEdit() {\r\n    this.setState({ edit: true });\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ newTask: event.target.value });\r\n  }\r\n  handleCompletion() {\r\n    this.props.complete(this.props.id);\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.edit(this.props.id, this.state.newTask);\r\n    this.setState({ edit: false });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.edit ? (\r\n          <form className=\"TodoItem-edit\" onSubmit={this.handleSubmit}>\r\n            <input value={this.state.newTask} onChange={this.handleChange} />\r\n            <button>\r\n              <i className=\"fa fa-check\"></i>\r\n            </button>\r\n          </form>\r\n        ) : (\r\n          <div className=\"TodoItem\">\r\n            <li\r\n              className={this.props.completed ? \"TodoItem-strike\" : \"\"}\r\n              onClick={this.handleCompletion}\r\n            >\r\n              {this.props.task}\r\n            </li>\r\n            <div>\r\n              <button onClick={this.handleEdit}>\r\n                <i className=\"fa fa-pencil\"></i>\r\n              </button>\r\n              <button onClick={this.handleRemove}>\r\n                <i className=\"fa fa-trash\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport uuid from \"react-uuid\";\r\nimport \"./TodoForm.css\";\r\n\r\nclass TodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todo: \"\",\r\n    };\r\n    this.handelChange = this.handelChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handelChange(event) {\r\n    this.setState({ todo: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.add({ task: this.state.todo, id: uuid(), completed: false });\r\n    this.setState({ todo: \"\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"TodoForm\">\r\n        <input\r\n          placeholder=\"Add new task ..\"\r\n          value={this.state.todo}\r\n          onChange={this.handelChange}\r\n        />\r\n        <button>+</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport \"./TodoList.css\";\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todos: [],\r\n    };\r\n    this.addTodo = this.addTodo.bind(this);\r\n    this.removeTodo = this.removeTodo.bind(this);\r\n    this.editTask = this.editTask.bind(this);\r\n    this.completedTask = this.completedTask.bind(this);\r\n  }\r\n\r\n  addTodo(todo) {\r\n    this.setState({ todos: [...this.state.todos, todo] });\r\n  }\r\n  removeTodo(id) {\r\n    let newTodos = this.state.todos.filter((todo) => todo.id !== id);\r\n    this.setState({ todos: newTodos });\r\n  }\r\n  editTask(id, newTask) {\r\n    let editedTodos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) return { ...todo, task: newTask };\r\n      return todo;\r\n    });\r\n    this.setState({ todos: editedTodos });\r\n  }\r\n  completedTask(id) {\r\n    let completedTodos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) return { ...todo, completed: !todo.completed };\r\n      return todo;\r\n    });\r\n    this.setState({ todos: completedTodos });\r\n  }\r\n  render() {\r\n    let todos = this.state.todos.map((todo) => (\r\n      <TodoItem\r\n        id={todo.id}\r\n        key={todo.id}\r\n        task={todo.task}\r\n        completed={todo.completed}\r\n        remove={this.removeTodo}\r\n        edit={this.editTask}\r\n        complete={this.completedTask}\r\n      />\r\n    ));\r\n    return (\r\n      <div className=\"TodoList\">\r\n        <h1>\r\n          <span>Todo</span>List\r\n        </h1>\r\n        <TodoForm add={this.addTodo} />\r\n        <div>{todos}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport TodoList from \"./TodoList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}