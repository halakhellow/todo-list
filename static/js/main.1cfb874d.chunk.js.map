{"version":3,"sources":["thumbtack.png","TodoItem.js","TodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","props","state","edit","newTask","task","handleRemove","bind","handleEdit","handleChange","handleCompletion","handleSubmit","this","remove","id","setState","event","target","value","complete","preventDefault","className","onSubmit","onChange","htmlFor","completed","type","onClick","checked","Component","TodoForm","todo","handelChange","add","uuid","placeholder","TodoList","todos","JSON","parse","window","localStorage","getItem","addTodo","removeTodo","editTask","completedTask","setItem","stringify","newTodos","filter","editedTodos","map","completedTodos","key","src","thumbtack","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1cfb874d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thumbtack.6f354303.png\";","import React, { Component } from \"react\";\r\nimport \"./TodoItem.css\";\r\n\r\nclass TodoItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      edit: false,\r\n      newTask: this.props.task,\r\n    };\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.handleEdit = this.handleEdit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleCompletion = this.handleCompletion.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleRemove() {\r\n    this.props.remove(this.props.id);\r\n  }\r\n  handleEdit() {\r\n    this.setState({ edit: true });\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ newTask: event.target.value });\r\n  }\r\n  handleCompletion() {\r\n    this.props.complete(this.props.id);\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.edit(this.props.id, this.state.newTask);\r\n    this.setState({ edit: false });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.edit ? (\r\n          <form className=\"TodoItem-edit\" onSubmit={this.handleSubmit}>\r\n            <input value={this.state.newTask} onChange={this.handleChange} />\r\n            <button>\r\n              <i className=\"fa fa-check\"></i>\r\n            </button>\r\n          </form>\r\n        ) : (\r\n          <div className=\"TodoItem\">\r\n            <div>\r\n              <label\r\n                htmlFor={this.props.id}\r\n                className={` container ${\r\n                  this.props.completed ? \"checked\" : \"\"\r\n                }`}\r\n              >\r\n                <span>{this.props.task}</span>\r\n                <input\r\n                  id={this.props.id}\r\n                  type=\"checkbox\"\r\n                  onClick={this.handleCompletion}\r\n                  checked={this.props.checked}\r\n                />\r\n                <span className=\"checkmark\"></span>\r\n              </label>\r\n            </div>\r\n            <div>\r\n              <button onClick={this.handleEdit}>\r\n                <i className=\"fa fa-pencil\"></i>\r\n              </button>\r\n              <button onClick={this.handleRemove}>\r\n                <i className=\"fa fa-trash\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport uuid from \"react-uuid\";\r\nimport \"./TodoForm.css\";\r\n\r\nclass TodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todo: \"\",\r\n    };\r\n    this.handelChange = this.handelChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handelChange(event) {\r\n    this.setState({ todo: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.add({ task: this.state.todo, id: uuid(), completed: false });\r\n    this.setState({ todo: \"\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"TodoForm\">\r\n        <input\r\n          placeholder=\"Add new task ..\"\r\n          value={this.state.todo}\r\n          onChange={this.handelChange}\r\n        />\r\n        <button>+</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport thumbtack from \"./thumbtack.png\";\r\nimport \"./TodoList.css\";\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todos: JSON.parse(window.localStorage.getItem(\"todos\") || \"[]\"),\r\n    };\r\n    this.addTodo = this.addTodo.bind(this);\r\n    this.removeTodo = this.removeTodo.bind(this);\r\n    this.editTask = this.editTask.bind(this);\r\n    this.completedTask = this.completedTask.bind(this);\r\n  }\r\n\r\n  addTodo(todo) {\r\n    this.setState({ todos: [...this.state.todos, todo] }, () =>\r\n      window.localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\r\n    );\r\n  }\r\n  removeTodo(id) {\r\n    let newTodos = this.state.todos.filter((todo) => todo.id !== id);\r\n    this.setState({ todos: newTodos }, () =>\r\n      window.localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\r\n    );\r\n  }\r\n  editTask(id, newTask) {\r\n    let editedTodos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) return { ...todo, task: newTask };\r\n      return todo;\r\n    });\r\n    this.setState({ todos: editedTodos }, () =>\r\n      window.localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\r\n    );\r\n  }\r\n  completedTask(id) {\r\n    let completedTodos = this.state.todos.map((todo) => {\r\n      if (todo.id === id)\r\n        return { ...todo, completed: !todo.completed, checked: !todo.checked };\r\n      return todo;\r\n    });\r\n    this.setState({ todos: completedTodos }, () =>\r\n      window.localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\r\n    );\r\n  }\r\n  render() {\r\n    let todos = this.state.todos.map((todo) => (\r\n      <TodoItem\r\n        id={todo.id}\r\n        key={todo.id}\r\n        task={todo.task}\r\n        completed={todo.completed}\r\n        checked={todo.checked}\r\n        remove={this.removeTodo}\r\n        edit={this.editTask}\r\n        complete={this.completedTask}\r\n      />\r\n    ));\r\n    return (\r\n      <div>\r\n        <h1 className=\"TodoList-title\">\r\n          To Do :\r\n          <img src={thumbtack} />\r\n        </h1>\r\n        <div className=\"TodoList\">\r\n          <TodoForm add={this.addTodo} />\r\n          <div>{todos}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}